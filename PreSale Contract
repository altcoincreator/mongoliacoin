pragma solidity ^0.4.16;
library SafeMath {
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}

interface token {
    function transfer(address receiver, uint amount) public;
}

contract MGLPresale {
    address public MGLbeneficiary;
    uint public fundingGoal;
    uint public amountRaised;
    uint public deadline;
    uint public price;
    token public tokenReward;
    mapping(address => uint256) public balanceOf;
    bool fundingGoalReached = false;
    bool crowdsaleClosed = false;

    event GoalReached(address recipient, uint totalAmountRaised);
    event FundTransfer(address backer, uint amount, bool isContribution);
	
    /**
     * Constrctor function     *
     * Setup the owner
     */
    function MGLPresale (
        address beneficiary,
        uint fundingGoalInEthers,
        uint durationInMinutes,
        uint finneyCostOfEach100Token,
        address addressOfTokenUsedAsReward
    ) public {
        MGLbeneficiary = beneficiary;
        fundingGoal = fundingGoalInEthers * 1 ether;
        deadline = now + durationInMinutes * 1 minutes;
        price = finneyCostOfEach100Token * 10000000000000 wei;
        tokenReward = token(addressOfTokenUsedAsReward);
    }	

    /**
     * Fallback function
     *
     * The function without name is the default function that is called whenever anyone sends funds to a contract
     */
    function () payable public {
               uint amount = msg.value;
require (msg.value >= 1 ether); //require minimum purchase for presale 
        balanceOf[msg.sender] += amount;
        amountRaised += amount;
        tokenReward.transfer(msg.sender, amount * 1400000000000000000 / price); ///40% presale bonus added
          }
   
    
  function withdraw(uint amount) public returns(bool) {
        require(amount <= this.balance);
require (msg.sender == MGLbeneficiary); //only allow beneficiary to make withdraw request
        MGLbeneficiary.transfer(amount);
        return true;
  }      
   

    /**
     * Check if goal was reached
     *
     * Checks if the goal or time limit has been reached and ends the campaign
     */
    function checkGoalReached()  public {
        if (now >= deadline) {
            if (amountRaised >= fundingGoal)
                    crowdsaleClosed = true;
    }
}
}

